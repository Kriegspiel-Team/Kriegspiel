package model
 
import main.Board;
import model.Fighter;
import main.Coord;
import java.util.ArrayList;
import java.util.List;
import java.util.HashSet

rule "DestroyArsenals"
	agenda-group "Communication"
	no-loop
    when
        $b : Board( myBoard : matrix )
        $a : Arsenal( $c : coord )
    then
    	if($b.arsenalIsAttacked($a)) {
    		modify($b) { destroyArsenal($c.x, $c.y, $a) }
    		//$b.destroyArsenal($c.x, $c.y, $a);
    		retract($a);
    	}
end

rule "initArsenalsCommunications"
	agenda-group "Communication"
	no-loop
    when
        $b : Board( myBoard : matrix )
    then
    	modify($b) { computeArsenalsCommunications() }
    	//$b.computeArsenalsCommunications();
end

rule "RelayComm"
	agenda-group "Communication"
	when
		$b : Board()
		$r : Relay( onCommunications == false, $team : owner, $coord : coord)
	then
			
		if($b.isOnCommunications($coord, $team)) {
			modify($b) { computeCommunications($coord.x, $coord.y, $team) }
			//$b.computeCommunications($coord.x, $coord.y, $team);
			modify($r) { setOnCommunications(true); }
		}
end

rule "SwiftRelayComm"
	agenda-group "Communication"
	when
		$b : Board()
		$sr : SwiftRelay( onCommunications == false, $team : owner, $coord : coord)
	then
		
		if($b.isOnCommunications($coord, $team)) {
			modify($b) { computeCommunications($coord.x, $coord.y, $team) }
			//$b.computeCommunications($coord.x, $coord.y, $team);
			modify($sr) { setOnCommunications(true); }
		}
end

rule "isConnectedByCom"
	agenda-group "Communication"
	when
		$b : Board()
		$f : Fighter(isConnected() == false, $team : owner, $coord : coord )
	then
	
		if($b.isOnCommunications($coord, $team)) {
			modify($f){ setConnected(true) }
			modify($b) { }
		}

		
		if($f.isConnected()) {
			ArrayList listNeighbours = new ArrayList<Fighter>();
			listNeighbours = $b.getNeighbours($coord.x, $coord.y, $team);	
			for(Fighter neighbour : (ArrayList<Fighter>)listNeighbours)
				modify(neighbour) { }
		}
end

rule "isConnectedByNeighbour"
	agenda-group "Communication"
	when
		$b : Board()
		$f : Fighter(isConnected() == false, $team : owner, $coord : coord )
	then
	
		if($b.hasConnectedNeighbour($f)) {
			modify($f){ setConnected(true) }
			modify($b) { }
		}	
			
		if($f.isConnected()) {
			ArrayList listNeighbours = new ArrayList<Fighter>();
			listNeighbours = $b.getNeighbours($coord.x, $coord.y, $team);	
			for(Fighter neighbour : (ArrayList<Fighter>)listNeighbours) 
				modify(neighbour) { }
		}
end
